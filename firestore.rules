rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Règles pour la collection users
    match /users/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && request.auth.uid == userId;
      allow delete: if request.auth != null && request.auth.uid == userId;
    }
    
    // Règles pour la collection quizzes
    match /quizzes/{quizId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if request.auth != null && 
                     (resource.data.creatorId == request.auth.uid || 
                      request.resource.data.creatorId == request.auth.uid);
      allow delete: if request.auth != null && resource.data.creatorId == request.auth.uid;
    }
    
    // Règles pour la collection lobbies/lobbys
    match /lobbies/{lobbyId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if request.auth != null && (
        resource.data.hostId == request.auth.uid || 
        request.resource.data.hostId == request.auth.uid ||
        existingData().players[request.auth.uid] != null ||
        incomingData().players[request.auth.uid] != null
      );
      allow delete: if request.auth != null && resource.data.hostId == request.auth.uid;
      
      // Fonction pour accéder aux données existantes
      function existingData() {
        return resource.data;
      }
      
      // Fonction pour accéder aux nouvelles données
      function incomingData() {
        return request.resource.data;
      }
    }
    
    // Alias pour la collection lobbys (si utilisée avec l'orthographe alternative)
    match /lobbys/{lobbyId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if request.auth != null && (
        resource.data.hostId == request.auth.uid || 
        request.resource.data.hostId == request.auth.uid ||
        existingData().players[request.auth.uid] != null ||
        incomingData().players[request.auth.uid] != null
      );
      allow delete: if request.auth != null && resource.data.hostId == request.auth.uid;
      
      // Fonction pour accéder aux données existantes
      function existingData() {
        return resource.data;
      }
      
      // Fonction pour accéder aux nouvelles données
      function incomingData() {
        return request.resource.data;
      }
    }
    
    // Règles pour la collection questions
    match /questions/{questionId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null;
    }
    
    // Règles pour la collection scores
    match /scores/{scoreId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow delete: if false; // Interdire la suppression des scores
    }
    
    // Règles pour les autres collections
    match /{document=**} {
      allow read: if request.auth != null;
      allow write: if false; // Par défaut, interdire l'écriture
    }
  }
}
