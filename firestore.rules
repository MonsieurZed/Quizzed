rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Fonction globale pour vérifier si l'utilisateur est un admin
    function isAdmin() {
      return request.auth != null && request.auth.uid in get(/databases/$(database)/documents/config/admins).data.adminIds;
    }
    
    // Règles pour la collection users
    match /users/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && request.auth.uid == userId;
      allow delete: if request.auth != null && request.auth.uid == userId;
    }
    
    // Règles pour la collection quizzes
    match /quizzes/{quizId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if request.auth != null && 
                     (resource.data.creatorId == request.auth.uid || 
                      request.resource.data.creatorId == request.auth.uid);
      allow delete: if request.auth != null && resource.data.creatorId == request.auth.uid;
    }
    
    // Règles pour la collection lobbies
    match /lobbies/{lobbyId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      
      // Permettre à tous les utilisateurs authentifiés de mettre à jour un lobby
      // Cela est nécessaire pour permettre à n'importe quel utilisateur de rejoindre un lobby
      allow update: if request.auth != null;
      
      allow delete: if request.auth != null && resource.data.hostId == request.auth.uid;
    }
    
    // Alias pour la collection lobbys (si utilisée avec l'orthographe alternative)
    match /lobbys/{lobbyId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      
      // Permettre à tous les utilisateurs authentifiés de mettre à jour un lobby
      // Cela est nécessaire pour permettre à n'importe quel utilisateur de rejoindre un lobby
      allow update: if request.auth != null;
      
      allow delete: if request.auth != null && resource.data.hostId == request.auth.uid;
    }
    
    // Règles pour la collection chat_messages
    match /chat_messages/{messageId} {
      // Fonction pour vérifier si l'utilisateur est l'hôte du lobby
      function isLobbyHost(lobbyId) {
        return request.auth.uid == get(/databases/$(database)/documents/lobbies/$(lobbyId)).data.hostId;
      }
      
      // Permettre à tous les utilisateurs authentifiés de lire les messages
      allow read: if request.auth != null;
      
      // Permettre aux utilisateurs authentifiés d'envoyer des messages avec leur propre ID
      allow create: if request.auth != null && 
                     request.resource.data.userId == request.auth.uid &&
                     request.resource.data.timestamp.toMillis() <= request.time.toMillis() + 60000; // Vérifier que le timestamp n'est pas trop dans le futur
      
      // Interdire la modification des messages existants pour la plupart des utilisateurs
      allow update: if false;
      
      // Permettre la suppression des messages uniquement aux administrateurs ou à l'hôte du lobby
      allow delete: if request.auth != null && 
                     (isAdmin() || 
                      isLobbyHost(resource.data.lobbyId) || 
                      resource.data.userId == request.auth.uid);
    }
    
    // Règles pour la collection questions
    match /questions/{questionId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null;
    }
    
    // Règles pour la collection scores
    match /scores/{scoreId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow delete: if false; // Interdire la suppression des scores
    }
    
    // Règles pour la collection messages
    match /messages/{messageId} {
      // Fonction pour vérifier si l'utilisateur est membre d'une chatRoom
      function isRoomParticipant(roomId) {
        let roomData = get(/databases/$(database)/documents/chatRooms/$(roomId)).data;
        return request.auth.uid in roomData.participants;
      }
      
      // Permettre aux participants d'une room de lire les messages
      allow read: if request.auth != null && isRoomParticipant(resource.data.roomId);
      
      // Permettre aux utilisateurs authentifiés d'envoyer des messages dans les rooms dont ils sont membres
      allow create: if request.auth != null && 
                     request.resource.data.senderId == request.auth.uid &&
                     isRoomParticipant(request.resource.data.roomId) &&
                     request.resource.data.timestamp.toMillis() <= request.time.toMillis() + 60000;
      
      // Interdire la modification des messages
      allow update: if false;
      
      // Permettre la suppression uniquement à l'expéditeur du message ou aux administrateurs
      allow delete: if request.auth != null && 
                    (request.auth.uid == resource.data.senderId || isAdmin());
    }
    
    // Règles pour la collection chatRooms
    match /chatRooms/{roomId} {
      // Un utilisateur peut voir une room s'il en est membre
      allow read: if request.auth != null && 
                   request.auth.uid in resource.data.participants;
      
      // Les utilisateurs peuvent créer des rooms s'ils en sont membres
      allow create: if request.auth != null && 
                    request.auth.uid in request.resource.data.participants;
      
      // Mettre à jour une room uniquement si l'utilisateur en est membre
      allow update: if request.auth != null && 
                    request.auth.uid in resource.data.participants &&
                    request.auth.uid in request.resource.data.participants;
      
      // Supprimer une room uniquement si l'utilisateur est admin ou créateur
      allow delete: if request.auth != null && 
                    (resource.data.createdBy == request.auth.uid || isAdmin());
    }
    
    // Règles pour les autres collections
    match /{document=**} {
      allow read: if request.auth != null;
      allow write: if false; // Par défaut, interdire l'écriture
    }
  }
}
